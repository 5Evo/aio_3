import json
import asyncio
from aiogram import Router
from aiogram import types
from aiogram import F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from core.utils import set_users_into_gsh, save_data_to_google_sheets
from create_bot import bot
from core import main_chatgpt
from dbase.dbworker import add_user, get_user_entry, update_last_interaction, update_last_dialog, get_user, \
    update_dialog_state, update_dialog_score, add_history, get_dialog_state, update_last_num_token, update_qa, \
    update_last_time_duration, get_num_queries, update_num_queries, update_last_chunks
from keyboards.user_keyboard import drating_inline_buttons_keyboard
from bot import logger
from handlers.admin_handler import ADMIN_CHAT_ID

router = Router()  # [2]

welcome_message = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> üôåüèª \n\n–Ø - –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –Ω–∞ –æ—Å–Ω–æ–≤–µ ChatGPT.\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –≤ " \
                  "–æ–±–ª–∞—Å—Ç–∏ Data Science –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ " \
                  "–ø–æ—ç—Ç–æ–º—É —É –≤–∞—Å –µ—Å—Ç—å 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ –º–Ω–µ.\n–°–æ–≤–µ—Ç—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ " \
                  "–ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π ‚û°Ô∏è /recommendations.\n\n " \
                  "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –±–æ—Ç—É (–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å " \
                  "–Ω—É–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º):\n" \
                  "/Example1(–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º. –ß—Ç–æ —ç—Ç–æ?)\n" \
                  "/Example2(–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–≤—ë—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π?)\n" \
                  "/Example3(–ö–∞–∫ –æ–±—É—á–∞—é—Ç—Å—è –Ω–µ–π—Ä–æ–Ω–∫–∏?)"


@router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    if not get_user_entry(message.from_user.id):
        user_data = (
            message.from_user.id,
            None,
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.username,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            None,
            None,
            None,
            None,
            0,
            "finish",
            0,
            0,
            0
        )
        add_user(user_data)
        try:
            set_users_into_gsh()
            logger.info(
                f"–î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ user –≤ Google-—Ç–∞–±–ª–∏—Ü—É!")
        except Exception as error:
            logger.warning(
                f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {error}")
        await message.reply(welcome_message + "\n\n–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...", parse_mode='HTML')
        update_dialog_state(message.from_user.id, 'start')
    else:
        if get_dialog_state(message.from_user.id) == 'close':
            await bot.send_message(message.from_user.id, "–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "
                                                         "–ø–æ–º–æ—â–Ω–∏–∫–∞.")
        else:
            await message.reply(welcome_message + "\n\n–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...", parse_mode='HTML')
            update_dialog_state(message.from_user.id, 'start')
    dialog_status = get_dialog_state(message.from_user.id)
    #print(f'user_handler: cmd_start: {dialog_status = }')
    await asyncio.sleep(1)


@router.message(lambda message: get_dialog_state(message.from_user.id) == 'close')
async def any_action(message: types.Message):
    await bot.send_message(message.from_user.id, "–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞.")
    await asyncio.sleep(1)


@router.message(Command(commands=['recommendations']))
async def send_recommendations(message: types.Message):
    """
    This handler will be called when user sends `/recommendations` command
    """
    recommendations_student = '''
    –Ø - –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –Ω–∞ –æ—Å–Ω–æ–≤–µ ChatGPT.
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –≤ –æ–±–ª–∞—Å—Ç–∏ Data Science –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
    –°–æ–≤–µ—Ç—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.

    1. –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–∞–∫ –∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —è —Ä–∞–±–æ—Ç–∞—é –±—ã—Å—Ç—Ä–µ–µ.

    2. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ —è—Å–Ω—ã: –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å 
    –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ. 

    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é: —Ç–∞–∫ –º–Ω–µ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.

    4. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è—Ö: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–∂–ª–∏–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —É–≤–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–º–µ—Ç—å 
    –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. 

    5. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–µ—á–∏: —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –º–Ω–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, 
    —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–Ω–µ—Å—Ç–∏. 

    6. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑: –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ª—É—á—à–µ –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É, 
    —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –¥–∞—Ç—å —á–µ—Ç–∫–∏–π –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. 

    7. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, 
    –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –æ —á–µ–º –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ. 

    8. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–º–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ —á–∞—Å—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ 
    –∫—Ä–∏–∫ –∏ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –±–µ—Å–µ–¥—É. 

    9. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã: —è —è–≤–ª—è—é—Å—å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∏ –º–Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ 
    –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ 2 –º–∏–Ω—É—Ç. 

    –ì–æ—Ç–æ–≤ –æ–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.
    '''

    await message.reply(recommendations_student, parse_mode='HTML')
    await asyncio.sleep(1)


@router.message(Command(commands=['Example1']))
async def send_question_example1(message: types.Message):
    """
    This handler will be called when user sends `/recommendations` command
    """
    question_example1 = '''
    <b>–í–æ–ø—Ä–æ—Å1</b>
    
    –ü—Ä–∏–≤–µ—Ç!
    –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º. –ß—Ç–æ —ç—Ç–æ?
    
    <b>–û—Ç–≤–µ—Ç ChatGPT:</b> 
    –ü—Ä–∏–≤–µ—Ç! –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, 
    –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ. –í —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ –∞–≥–µ–Ω—Ç 
    –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –≤–∏–¥–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–ª–∏ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è. –¶–µ–ª—å 
    –∞–≥–µ–Ω—Ç–∞ - –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç —Å—Ä–µ–¥—ã. 
    
    –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –º–∞—Ä–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π (MDP), –≥–¥–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–µ–¥—ã 
    –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞. –ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞ 
    –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–µ–¥—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É. 
    
    –û—Å–Ω–æ–≤–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º Q-–æ–±—É—á–µ–Ω–∏—è. –û–Ω –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ—Ü–µ–Ω–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ 
    –¥–µ–π—Å—Ç–≤–∏–π (Q-—Ñ—É–Ω–∫—Ü–∏–∏), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É, –∫–æ—Ç–æ—Ä—É—é –∞–≥–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç, –≤—ã–±—Ä–∞–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ 
    –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ê–ª–≥–æ—Ä–∏—Ç–º Q-–æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è Q-—Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∏ –æ—Ü–µ–Ω–∫–∏ 
    –±—É–¥—É—â–∏—Ö –Ω–∞–≥—Ä–∞–¥. 
    
    –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —à–∏—Ä–æ–∫–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ç–∞–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö, –∫–∞–∫ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, –∏–≥—Ä–æ–≤–∞—è –∏–Ω–¥—É—Å—Ç—Ä–∏—è, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ 
    —Ä—ã–Ω–∫–∏ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ 
    —Å–ª–æ–∂–Ω—ã—Ö –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥–∞—Ö. 
    '''

    await asyncio.sleep(2)
    await message.reply(question_example1, parse_mode='HTML')


@router.message(Command(commands=['Example2']))
async def send_question_example2(message: types.Message):
    """
    This handler will be called when user sends `/recommendations` command
    """
    question_example2 = '''
    <b>–í–æ–ø—Ä–æ—Å2</b>

    –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–≤—ë—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π?

    <b>–û—Ç–≤–µ—Ç ChatGPT:</b> 
    –°–≤—ë—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—ë—Ä—Ç–æ—á–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 
    –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç—ã. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–∞–±–æ—Ä–∞ —Å–≤—ë—Ä—Ç–æ—á–Ω—ã—Ö 
    —è–¥–µ—Ä (—Ñ–∏–ª—å—Ç—Ä–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤. –ö–∞–∂–¥–æ–µ 
    —Å–≤—ë—Ä—Ç–æ—á–Ω–æ–µ —è–¥—Ä–æ —Å–∫–æ–ª—å–∑–∏—Ç –ø–æ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –ø–µ—Ä–µ–º–Ω–æ–∂–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –≤–µ—Å–∞–º–∏ —è–¥—Ä–∞ –∏ 
    —Å—É–º–º–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –≥—Ä–∞–Ω–∏—Ü—ã, —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–ª–∏ —Ñ–æ—Ä–º—ã, 
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–¥—Ä–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å–≤—ë—Ä—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ (feature map), 
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ–Ω–∑–æ—Ä —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏. 

    –°–≤—ë—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ—è–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ –ø—É–ª–∏–Ω–≥ —Å–ª–æ–∏ –∏ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏, 
    –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–≤—ë—Ä—Ç–æ—á–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏. '''

    await asyncio.sleep(2)
    await message.reply(question_example2, parse_mode='HTML')


@router.message(Command(commands=['Example3']))
async def send_question_example1(message: types.Message):
    """
    This handler will be called when user sends `/recommendations` command
    """
    question_example3 = '''
    <b>–í–æ–ø—Ä–æ—Å3</b>

    –ö–∞–∫ –æ–±—É—á–∞—é—Ç—Å—è –Ω–µ–π—Ä–æ–Ω–∫–∏?
    
    <b>–û—Ç–≤–µ—Ç ChatGPT:</b> –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—É—á–∞—é—Ç—Å—è –ø—É—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–∏—Ö –≤–µ—Å–æ–≤. –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 
    –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≥–¥–µ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 
    –∫–æ—à–∫–æ–π –∏–ª–∏ —Å–æ–±–∞–∫–æ–π. –ù–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ –≤–µ—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. –ö–∞–∂–¥—ã–π –Ω–µ–π—Ä–æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç 
    –∑–∞ —Å–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ —Ö–≤–æ—Å—Ç–∞, –≤—ã—Å–æ—Ç–∞ –ø–ª–µ—á–∞) –∏, –Ω–∞–π–¥—è —Å–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫, –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–ª—å—à–µ. –ù–∞ 
    –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 91% –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ —ç—Ç–æ –∫–æ—à–∫–∞. 
    –ß—Ç–æ–±—ã –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–∞—É—á–∏–ª–∞—Å—å, –µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è - –æ–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞. 
    
    –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —É—á–µ–±–Ω–∏–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–∏ –≤–µ—Å–∞, 
    —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—É—á–∞—é—Ç—Å—è 
    –ø—É—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤–æ–∏—Ö –≤–µ—Å–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö 
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. '''

    await asyncio.sleep(2)
    await message.reply(question_example3, parse_mode='HTML')


@router.message(Command(commands=['balance']))
async def send_balance(message: types.Message):
    await asyncio.sleep(1)


@router.message(Command(commands=['context']))
async def reset_context(message: types.Message):
    await asyncio.sleep(1)


@router.callback_query(lambda c: c.data.startswith("drate_"))
async def process_callback_qrating(callback_query: types.CallbackQuery):
    if get_dialog_state(callback_query.from_user.id) == 'close':
        user_data = get_user(callback_query.from_user.id)   # –ø–æ–ª—É—á–∏–º –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        #print(f'process_callback_qrating: {user_data = }')
        score_chuncks = user_data[9]
        print(f'process_callback_qrating: {score_chuncks = }')
        rating = int(callback_query.data[6:])
        #print(f'process_callback_qrating: {type(rating)}, {rating = }')
        await bot.answer_callback_query(callback_query.id, text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating}!", show_alert=True)
        if callback_query.from_user.id in ADMIN_CHAT_ID:
            await bot.send_message(callback_query.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating}! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å "
                                                                f"—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")
        else:
            await bot.send_message(callback_query.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating}! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å "
                                                                f"—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–æ—Å—Ç–∞–ª–æ—Å—å "
                                                                f"{int(10 - get_num_queries(callback_query.from_user.id))} –∑–∞–ø—Ä–æ—Å(–æ–≤).")
        update_dialog_state(callback_query.from_user.id, 'finish')
        # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        update_dialog_score(callback_query.from_user.id, rating)

        # –ø–µ—Ä–µ–¥–∞ –∑–∞–ø–∏—Å—å—é –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ user_data:
        for i, item in enumerate(user_data):
            print(f'User_data[{i}]. {item}')

        # –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏
        history_data = (
            callback_query.from_user.id,
            "question",
            "\n".join([f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data[7]}', f'–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {user_data[8]}']),
            score_chuncks,
            rating,
            user_data[10],
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user_data[13]
        )

        # –ø–µ—Ä–µ–¥–∞ –∑–∞–ø–∏—Å—å—é –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ history_data:
        for i, item in enumerate(history_data):
            print(f'history_data[{i}]. {item}')

        add_history(history_data)
        try:
            logger.info(
                f"–û—Ü–µ–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–∞! –î–æ–±–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –û—Ü–µ–Ω–∫–∞")
            save_data_to_google_sheets('–û—Ü–µ–Ω–∫–∏', history_data)
        except Exception as error:
            logger.warning(
                f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –û—Ü–µ–Ω–∫–∏: {error}")
    await bot.answer_callback_query(callback_query.id)
    await asyncio.sleep(1)


@router.message(lambda message: get_dialog_state(message.from_user.id) in ['start', 'finish'])
async def generate_answer(message: types.Message):
    #print(f'generate_answer: starting...')
    update_last_interaction(message.from_user.id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    num_queries = get_num_queries(message.from_user.id)
    #print(f'generate_answer: {num_queries = }')
    if num_queries < 10 or message.from_user.id in ADMIN_CHAT_ID:       # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ç–≤–µ—Ç–∞–º: –º–µ–Ω–µ–µ 10 –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –∞–¥–º–∏–Ω - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
        try:
            msg = await message.answer("–ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞. –ñ–¥–∏—Ç–µ...‚è≥")  # msg["message_id"]
            time1 = datetime.now()
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ—à–µ–ª: {message.text}")
            completion, dialog, chunks = main_chatgpt.WorkerOpenAI().get_chatgpt_answer(message.text)
            #logger.info(f"–ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª—Å—è: {completion}")
            logger.info(f"–ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª—Å—è: [completion]")
            #content_to_print = dialog[1]['content']
            #print(f'user_handler: generate_answer: {content_to_print = }')
            #print(f'user_handler: generate_answer: {chunks = }')
            time2 = datetime.now()
            duration = time2 - time1
            await msg.edit_text(completion.choices[0].message.content)
            #logger.info(f"–¶–ï–ù–ê –∑–∞–ø—Ä–æ—Å–∞: {0.0002 * (completion['usage']['total_tokens'] / 1000)}$\n {completion['usage']}")
            logger.info(f"–¶–ï–ù–ê –∑–∞–ø—Ä–æ—Å–∞: {0.004 * (completion['usage']['total_tokens'] / 1000)}$")
            update_last_chunks(message.from_user.id, chunks)
            update_last_dialog(message.from_user.id, json.dumps(dialog))
            update_last_time_duration(message.from_user.id, int(duration.total_seconds()))
            update_qa(message.from_user.id, (message.text, completion.choices[0].message.content))
            update_dialog_state(message.from_user.id, 'close')
            update_last_num_token(message.from_user.id, completion['usage']['total_tokens'])
            update_num_queries(message.from_user.id, num_queries + 1)
            await asyncio.sleep(1)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç -2 –¥–æ 2:",
                                 reply_markup=drating_inline_buttons_keyboard())
        except Exception as error:
            logger.warning(
                f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error}")
            await bot.send_message(message.from_user.id, f"–û–®–ò–ë–ö–ê: {error}")
            await bot.send_message(message.from_user.id, "–ú–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (10) –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ "
                                                     "—Ä–µ–∂–∏–º–∞.\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –ü–æ–º–æ—â–Ω–∏–∫–æ–º! ü§ù")
    await asyncio.sleep(1)


async def generate_algorithm_error(message: types.Message):
    logger.warning(f"–û—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–±–æ–π –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ë–æ—Ç–∞: –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    await asyncio.sleep(1)
